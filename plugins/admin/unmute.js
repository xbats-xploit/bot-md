export default {
    command: 'unmute',
    description: 'Unmute user in group',
    category: 'admin',
    usage: '@user',
    example: '.unmute @6287837597549',
    aliases: ['unsilence', 'unmuted'],
    groupOnly: true,
    adminOnly: true,
    
    async execute(context) {
        const { sock, msg, isGroup } = context
        
        if (!isGroup) {
            return await sock.sendMessage(msg.key.remoteJid, {
                text: '‚ùå ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥òs'
            }, { quoted: msg })
        }
        
        const mentionedJid = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid
        const quotedUser = msg.message?.extendedTextMessage?.contextInfo?.participant
        
        let target = mentionedJid?.[0] || quotedUser
        
        if (!target) {
            return await sock.sendMessage(msg.key.remoteJid, {
                text: '‚ùå ·¥ò ü·¥á·¥Äs·¥á ·¥ç·¥á…¥·¥õ…™·¥è…¥ ·¥è Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä'
            }, { quoted: msg })
        }
        
        try {
            global.mutedUsers = global.mutedUsers || {}
            const groupId = msg.key.remoteJid
            
            if (global.mutedUsers[groupId] && global.mutedUsers[groupId][target]) {
                delete global.mutedUsers[groupId][target]
                
                await sock.sendMessage(msg.key.remoteJid, {
                    text: `üîä @${target.split('@')[0]}  ú·¥Äs  ô·¥á·¥á…¥ ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö`,
                    mentions: [target]
                }, { quoted: msg })
            } else {
                await sock.sendMessage(msg.key.remoteJid, {
                    text: `‚ùå @${target.split('@')[0]} …™s …¥·¥è·¥õ ·¥ç·¥ú·¥õ·¥á·¥Ö`,
                    mentions: [target]
                }, { quoted: msg })
            }
        } catch (error) {
            await sock.sendMessage(msg.key.remoteJid, {
                text: '‚ùå ·¥á Ä Ä·¥è Ä ·¥ú…¥·¥ç·¥ú·¥õ…™…¥…¢ ·¥ús·¥á Ä'
            }, { quoted: msg })
        }
    }
}
