export default {
    command: 'listbadword',
    description: 'Show badwords list for group or global',
    category: 'owner',
    usage: '[--global]',
    example: '.listbadword --global',
    aliases: ['badwordlist', 'badwords'],
    ownerOnly: true,
    
    async execute(context) {
        const { msg, args, db, reply, isGroup } = context
        
        try {
            const isGlobal = args.includes('--global')
            
            if (isGlobal) {
                // Show global badwords
                const globalBadwords = db.getGlobalBadwords()
                
                if (globalBadwords.length === 0) {
                    return await reply(`üìã *·¥Ö·¥ÄÍú∞·¥õ·¥Ä Ä  ô·¥Ä·¥Ö·¥°·¥è Ä·¥Ö …¢ ü·¥è ô·¥Ä ü*

‚ùå ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ä·¥Ö·¥Ä  ô·¥Ä·¥Ö·¥°·¥è Ä·¥Ö …¢ ü·¥è ô·¥Ä ü`)
                }
                
                const chunkSize = 20 // Show 20 words per message
                const chunks = []
                for (let i = 0; i < globalBadwords.length; i += chunkSize) {
                    chunks.push(globalBadwords.slice(i, i + chunkSize))
                }
                
                for (let i = 0; i < chunks.length; i++) {
                    const badwordsList = chunks[i]
                        .map((word, index) => `${i * chunkSize + index + 1}. ${word}`)
                        .join('\n')
                    
                    const message = `üìã *·¥Ö·¥ÄÍú∞·¥õ·¥Ä Ä  ô·¥Ä·¥Ö·¥°·¥è Ä·¥Ö …¢ ü·¥è ô·¥Ä ü* (${i + 1}/${chunks.length})

üìä *·¥õ·¥è·¥õ·¥Ä ü:* ${globalBadwords.length} ·¥ã·¥Ä·¥õ·¥Ä

üìù *·¥Ö·¥ÄÍú∞·¥õ·¥Ä Ä ·¥ã·¥Ä·¥õ·¥Ä:*
${badwordsList}

üîß *·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú:*
‚Ä¢ \`.addbadword <kata> --global\` - ·¥õ·¥Ä·¥ç ô·¥Ä ú ·¥ã·¥á …¢ ü·¥è ô·¥Ä ü
‚Ä¢ \`.delbadword <kata> --global\` -  ú·¥Ä·¥ò·¥ús ·¥Ö·¥Ä Ä…™ …¢ ü·¥è ô·¥Ä ü`
                    
                    await reply(message)
                }
            } else {
                // Show group badwords
                if (!isGroup) {
                    return await reply('‚ùå ·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú …™…¥…™  ú·¥Ä…¥ è·¥Ä  ô…™s·¥Ä ·¥Ö…™…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ ·¥Ö…™ …¢ Ä·¥ú·¥ò ·¥Ä·¥õ·¥Ä·¥ú ·¥Ö·¥á…¥…¢·¥Ä…¥ --global')
                }
                
                const groupId = msg.key.remoteJid
                const groupBadwords = db.getGroupBadwords(groupId)
                const globalBadwords = db.getGlobalBadwords()
                
                if (groupBadwords.length === 0) {
                    return await reply(`üìã *·¥Ö·¥ÄÍú∞·¥õ·¥Ä Ä  ô·¥Ä·¥Ö·¥°·¥è Ä·¥Ö …¢ Ä·¥ú·¥ò*

‚ùå ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ä·¥Ö·¥Ä  ô·¥Ä·¥Ö·¥°·¥è Ä·¥Ö ·¥Ñ·¥ús·¥õ·¥è·¥ç ·¥Ö…™ …¢ Ä·¥ú·¥ò …™…¥…™

üí° *·¥Ñ·¥Ä·¥õ·¥Ä·¥õ·¥Ä…¥:*  ô·¥è·¥õ ·¥õ·¥á·¥õ·¥Ä·¥ò ·¥ç·¥á…¥…¢…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ ${globalBadwords.length}  ô·¥Ä·¥Ö·¥°·¥è Ä·¥Ö ·¥Ö·¥áÍú∞·¥Ä·¥ú ü·¥õ

·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥·¥Ä·¥ç ô·¥Ä ú: \`.addbadword <kata>\`
·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á ü…™ ú·¥Ä·¥õ …¢ ü·¥è ô·¥Ä ü: \`.listbadword --global\``)
                }
                
                const badwordsList = groupBadwords
                    .map((word, index) => `${index + 1}. ${word}`)
                    .join('\n')
                
                const message = `üìã *·¥Ö·¥ÄÍú∞·¥õ·¥Ä Ä  ô·¥Ä·¥Ö·¥°·¥è Ä·¥Ö …¢ Ä·¥ú·¥ò*

üìä *·¥õ·¥è·¥õ·¥Ä ü:* ${groupBadwords.length} ·¥ã·¥Ä·¥õ·¥Ä ·¥Ñ·¥ús·¥õ·¥è·¥ç + ${globalBadwords.length} ·¥ã·¥Ä·¥õ·¥Ä ·¥Ö·¥áÍú∞·¥Ä·¥ú ü·¥õ

üìù *·¥Ö·¥ÄÍú∞·¥õ·¥Ä Ä ·¥ã·¥Ä·¥õ·¥Ä ·¥Ñ·¥ús·¥õ·¥è·¥ç …¢ Ä·¥ú·¥ò:*
${badwordsList}

üîß *·¥ò·¥á Ä…™…¥·¥õ·¥Ä ú:*
‚Ä¢ \`.addbadword <kata>\` - ·¥õ·¥Ä·¥ç ô·¥Ä ú ·¥ã·¥á …¢ Ä·¥ú·¥ò
‚Ä¢ \`.delbadword <kata>\` -  ú·¥Ä·¥ò·¥ús ·¥Ö·¥Ä Ä…™ …¢ Ä·¥ú·¥ò
‚Ä¢ \`.listbadword --global\` -  ü…™ ú·¥Ä·¥õ ·¥Ö·¥ÄÍú∞·¥õ·¥Ä Ä …¢ ü·¥è ô·¥Ä ü`
                
                await reply(message)
            }
            
        } catch (error) {
            console.error('Error showing badwords list:', error)
            await reply('‚ùå ·¥õ·¥á Ä·¥ä·¥Ä·¥Ö…™ ·¥ã·¥áÍú±·¥Ä ü·¥Ä ú·¥Ä…¥ Íú±·¥Ä·¥Ä·¥õ ·¥ç·¥á…¥·¥Ä·¥ç·¥ò…™ ü·¥ã·¥Ä…¥ ·¥Ö·¥ÄÍú∞·¥õ·¥Ä Ä  ô·¥Ä·¥Ö·¥°·¥è Ä·¥Ö')
        }
    }
}
